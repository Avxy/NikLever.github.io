{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","default","url","AudioClip","onLoad","jumpAction","setJumpAction","node","runAction","accLeft","accRight","xSpeed","setInputControl","jumpUp","moveBy","p","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","self","systemEvent","on","SystemEvent","EventType","KEY_DOWN","event","keyCode","KEY","a","d","KEY_UP","audioEngine","playEffect","start","update","dt","Math","abs","x"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACX;AACGC,oBAAY,CAFJ;AAGR;AACAC,sBAAc,CAJN;AAKR;AACAC,sBAAc,CANN;AAOR;AACAC,eAAO,CARC;AASRC,mBAAW;AACPC,qBAAS,IADF;AAEPC,iBAAKX,GAAGY;AAFD;AATH,KAHP;;AAkBLC,YAAQ,kBAAY;AAChB;AACA,aAAKC,UAAL,GAAkB,KAAKC,aAAL,EAAlB;AACA,aAAKC,IAAL,CAAUC,SAAV,CAAoB,KAAKH,UAAzB;;AAEA;AACA,aAAKI,OAAL,GAAe,KAAf;AACA,aAAKC,QAAL,GAAgB,KAAhB;AACA;AACA,aAAKC,MAAL,GAAc,CAAd;;AAEA;AACA,aAAKC,eAAL;AACH,KA/BI;;AAiCLN,mBAAe,yBAAY;AACvB;AACA,YAAIO,SAAStB,GAAGuB,MAAH,CAAU,KAAKjB,YAAf,EAA6BN,GAAGwB,CAAH,CAAK,CAAL,EAAQ,KAAKnB,UAAb,CAA7B,EAAuDoB,MAAvD,CAA8DzB,GAAG0B,kBAAH,EAA9D,CAAb;AACA;AACA,YAAIC,WAAW3B,GAAGuB,MAAH,CAAU,KAAKjB,YAAf,EAA6BN,GAAGwB,CAAH,CAAK,CAAL,EAAQ,CAAC,KAAKnB,UAAd,CAA7B,EAAwDoB,MAAxD,CAA+DzB,GAAG4B,iBAAH,EAA/D,CAAf;AACA;AACA,YAAIC,WAAW7B,GAAG8B,QAAH,CAAY,KAAKC,aAAjB,EAAgC,IAAhC,CAAf;;AAEA,eAAO/B,GAAGgC,aAAH,CAAiBhC,GAAGiC,QAAH,CAAYX,MAAZ,EAAoBK,QAApB,EAA8BE,QAA9B,CAAjB,CAAP;AACH,KA1CI;;AA4CRR,qBAAiB,2BAAY;AACtB,YAAIa,OAAO,IAAX;AACA;AACA;AACAlC,WAAGmC,WAAH,CAAeC,EAAf,CAAkBpC,GAAGqC,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,UAAUC,KAAV,EAAgB;AACjE,oBAAOA,MAAMC,OAAb;AACI,qBAAKzC,GAAG0C,GAAH,CAAOC,CAAZ;AACIT,yBAAKhB,OAAL,GAAe,IAAf;AACA;AACJ,qBAAKlB,GAAG0C,GAAH,CAAOE,CAAZ;AACIV,yBAAKf,QAAL,GAAgB,IAAhB;AACA;AANR;AAQH,SATD;;AAWA;AACAnB,WAAGmC,WAAH,CAAeC,EAAf,CAAkBpC,GAAGqC,WAAH,CAAeC,SAAf,CAAyBO,MAA3C,EAAmD,UAAUL,KAAV,EAAgB;AAC/D,oBAAOA,MAAMC,OAAb;AACI,qBAAKzC,GAAG0C,GAAH,CAAOC,CAAZ;AACIT,yBAAKhB,OAAL,GAAe,KAAf;AACA;AACJ,qBAAKlB,GAAG0C,GAAH,CAAOE,CAAZ;AACIV,yBAAKf,QAAL,GAAgB,KAAhB;AACA;AANR;AAQH,SATD;AAUH,KAtEI;;AAwERY,mBAAe,yBAAY;AACpB;AACA/B,WAAG8C,WAAH,CAAeC,UAAf,CAA0B,KAAKtC,SAA/B,EAA0C,KAA1C;AACH,KA3EI;;AA6ELuC,SA7EK,mBA6EI,CAER,CA/EI;;;AAiFLC,YAAQ,gBAAUC,EAAV,EAAc;AAClB;AACA,YAAI,KAAKhC,OAAT,EAAkB;AACd,iBAAKE,MAAL,IAAe,KAAKZ,KAAL,GAAa0C,EAA5B;AACH,SAFD,MAEO,IAAI,KAAK/B,QAAT,EAAmB;AACtB,iBAAKC,MAAL,IAAe,KAAKZ,KAAL,GAAa0C,EAA5B;AACH;AACD;AACA,YAAKC,KAAKC,GAAL,CAAS,KAAKhC,MAAd,IAAwB,KAAKb,YAAlC,EAAiD;AAC7C;AACA,iBAAKa,MAAL,GAAc,KAAKb,YAAL,GAAoB,KAAKa,MAAzB,GAAkC+B,KAAKC,GAAL,CAAS,KAAKhC,MAAd,CAAhD;AACH;;AAED;AACA,aAAKJ,IAAL,CAAUqC,CAAV,IAAe,KAAKjC,MAAL,GAAc8B,EAA7B;AACH;AAhGI,CAAT","file":"Player.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n    \t// main character's jump height\n        jumpHeight: 0,\n        // main character's jump duration\n        jumpDuration: 0,\n        // maximal movement speed\n        maxMoveSpeed: 0,\n        // acceleration\n        accel: 0,\n        jumpAudio: {\n            default: null,\n            url: cc.AudioClip\n        },\n    },\n    \n    onLoad: function () {\n        // initialize jump action\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // switch off acceleration direction\n        this.accLeft = false;\n        this.accRight = false;\n        // current horizontal speed of main character\n        this.xSpeed = 0;\n\n        // initialize keyboard input listener\n        this.setInputControl();\n    },\n    \n    setJumpAction: function () {\n        // jump up\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // jump down\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // repeat\n        var callback = cc.callFunc(this.playJumpSound, this);\n        \n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n\tsetInputControl: function () {\n        var self = this;\n        // add keyboard event listener\n        // When there is a key being pressed down, judge if it's the designated directional button and set up acceleration in the corresponding direction\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, function (event){\n            switch(event.keyCode) {\n                case cc.KEY.a:\n                    self.accLeft = true;\n                    break;\n                case cc.KEY.d:\n                    self.accRight = true;\n                    break;\n            }\n        });\n\n        // when releasing the button, stop acceleration in this direction\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, function (event){\n            switch(event.keyCode) {\n                case cc.KEY.a:\n                    self.accLeft = false;\n                    break;\n                case cc.KEY.d:\n                    self.accRight = false;\n                    break;\n            }\n        });        \n    },\n\n\tplayJumpSound: function () {\n        // invoke sound engine to play the sound\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n    \n    start () {\n\n    },\n\n    update: function (dt) {\n        // update speed of each frame according to the current acceleration direction\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // restrict the movement speed of the main character to the maximum movement speed\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // if speed reaches its limit, use the max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // update the position of the main character according to the current speed\n        this.node.x += this.xSpeed * dt;\n    },\n});\n"]}